/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "client.h"


#include "data.h"


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "data/checksums.h"


#include "data/emoji.h"

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "data/collection.h"

SWIGINTERN std::vector< Emojidex::Data::Emoji >::const_reference std_vector_Sl_Emojidex_Data_Emoji_Sg__get(std::vector< Emojidex::Data::Emoji > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Emojidex_Data_Emoji_Sg__set(std::vector< Emojidex::Data::Emoji > *self,int i,std::vector< Emojidex::Data::Emoji >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "data/moji_codes.h"


#include "service/indexes.h"


#include "service/search.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Client_1Search_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Emojidex::Client *arg1 = (Emojidex::Client *) 0 ;
  Emojidex::Service::Search *arg2 = (Emojidex::Service::Search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Emojidex::Client **)&jarg1; 
  arg2 = *(Emojidex::Service::Search **)&jarg2; 
  if (arg1) (arg1)->Search = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Client_1Search_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Client *arg1 = (Emojidex::Client *) 0 ;
  Emojidex::Service::Search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Client **)&jarg1; 
  result = (Emojidex::Service::Search *) ((arg1)->Search);
  *(Emojidex::Service::Search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Client_1Indexes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Emojidex::Client *arg1 = (Emojidex::Client *) 0 ;
  Emojidex::Service::Search *arg2 = (Emojidex::Service::Search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Emojidex::Client **)&jarg1; 
  arg2 = *(Emojidex::Service::Search **)&jarg2; 
  if (arg1) (arg1)->Indexes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Client_1Indexes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Client *arg1 = (Emojidex::Client *) 0 ;
  Emojidex::Service::Search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Client **)&jarg1; 
  result = (Emojidex::Service::Search *) ((arg1)->Indexes);
  *(Emojidex::Service::Search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1Emojidex_1Client(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Emojidex::Client *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Emojidex::Client *)new Emojidex::Client();
  *(Emojidex::Client **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Client_1apiVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  Emojidex::Client *arg1 = (Emojidex::Client *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Client **)&jarg1; 
  result = (char)(arg1)->apiVersion();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_delete_1Emojidex_1Client(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Emojidex::Client *arg1 = (Emojidex::Client *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Emojidex::Client **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Checksums_1sum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  Emojidex::Data::Checksums *arg1 = (Emojidex::Data::Checksums *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Checksums **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->sum(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1Emojidex_1Data_1Checksums(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Emojidex::Data::Checksums *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Emojidex::Data::Checksums *)new Emojidex::Data::Checksums();
  *(Emojidex::Data::Checksums **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_delete_1Emojidex_1Data_1Checksums(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Emojidex::Data::Checksums *arg1 = (Emojidex::Data::Checksums *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Emojidex::Data::Checksums **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1moji_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->moji = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1moji_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (std::string *) & ((arg1)->moji);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->code = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (std::string *) & ((arg1)->code);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1unicode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->unicode = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1unicode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (std::string *) & ((arg1)->unicode);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1category_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->category = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1category_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (std::string *) & ((arg1)->category);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1tags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->tags = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1tags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->tags);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1base_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->base = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1base_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (std::string *) & ((arg1)->base);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1variants_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->variants = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1variants_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->variants);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1link_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->link = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1link_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (std::string *) & ((arg1)->link);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1is_1wide_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_wide = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1is_1wide_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (bool) ((arg1)->is_wide);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1copyright_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->copyright_lock = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1copyright_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (bool) ((arg1)->copyright_lock);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1times_1used_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->times_used = arg2;
}


SWIGEXPORT jint JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1times_1used_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (int) ((arg1)->times_used);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1attribution_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->attribution = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1attribution_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (std::string *) & ((arg1)->attribution);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1user_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->user_id = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1user_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (std::string *) & ((arg1)->user_id);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1checksums_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  Emojidex::Data::Checksums *arg2 = (Emojidex::Data::Checksums *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  arg2 = *(Emojidex::Data::Checksums **)&jarg2; 
  if (arg1) (arg1)->checksums = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Emoji_1checksums_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  Emojidex::Data::Checksums *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  result = (Emojidex::Data::Checksums *)& ((arg1)->checksums);
  *(Emojidex::Data::Checksums **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1Emojidex_1Data_1Emoji(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Emojidex::Data::Emoji *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Emojidex::Data::Emoji *)new Emojidex::Data::Emoji();
  *(Emojidex::Data::Emoji **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_delete_1Emojidex_1Data_1Emoji(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Emojidex::Data::Emoji *arg1 = (Emojidex::Data::Emoji *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Emojidex::Data::Emoji **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_emojidex_EmojidexJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1Emojidex_1Data_1Collection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Emojidex::Data::Collection *)new Emojidex::Data::Collection();
  *(Emojidex::Data::Collection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_delete_1Emojidex_1Data_1Collection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  std::vector< Emojidex::Data::Emoji > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  result = (arg1)->all();
  *(std::vector< Emojidex::Data::Emoji > **)&jresult = new std::vector< Emojidex::Data::Emoji >((const std::vector< Emojidex::Data::Emoji > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  Emojidex::Data::Emoji arg2 ;
  Emojidex::Data::Emoji *argp2 ;
  Emojidex::Data::Emoji result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  argp2 = *(Emojidex::Data::Emoji **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Emojidex::Data::Emoji");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->add(arg2);
  *(Emojidex::Data::Emoji **)&jresult = new Emojidex::Data::Emoji((const Emojidex::Data::Emoji &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1findByMoji(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  std::string arg2 ;
  Emojidex::Data::Emoji result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->findByMoji(arg2);
  *(Emojidex::Data::Emoji **)&jresult = new Emojidex::Data::Emoji((const Emojidex::Data::Emoji &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1findByCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  std::string arg2 ;
  Emojidex::Data::Emoji result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->findByCode(arg2);
  *(Emojidex::Data::Emoji **)&jresult = new Emojidex::Data::Emoji((const Emojidex::Data::Emoji &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1findByUnicode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  std::string arg2 ;
  Emojidex::Data::Emoji result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->findByUnicode(arg2);
  *(Emojidex::Data::Emoji **)&jresult = new Emojidex::Data::Emoji((const Emojidex::Data::Emoji &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  std::string arg2 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->category(arg2);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  Emojidex::Data::Collection arg2 ;
  Emojidex::Data::Collection *argp2 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  argp2 = *(Emojidex::Data::Collection **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Emojidex::Data::Collection");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->merge(arg2);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1endpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->endpoint = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1endpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  result = (std::string *) & ((arg1)->endpoint);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1detailed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->detailed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1detailed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  result = (bool) ((arg1)->detailed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1locale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->locale = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1locale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  result = (std::string *) & ((arg1)->locale);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1page_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->page = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1page_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  result = (unsigned int) ((arg1)->page);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->limit = arg2;
}


SWIGEXPORT jint JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  result = (unsigned short) ((arg1)->limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  result = (unsigned int) ((arg1)->total_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1Collection_1more(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection *arg1 = (Emojidex::Data::Collection *) 0 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::Collection **)&jarg1; 
  result = (arg1)->more();
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1EmojiVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Emojidex::Data::Emoji > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Emojidex::Data::Emoji > *)new std::vector< Emojidex::Data::Emoji >();
  *(std::vector< Emojidex::Data::Emoji > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1EmojiVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Emojidex::Data::Emoji >::size_type arg1 ;
  std::vector< Emojidex::Data::Emoji > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Emojidex::Data::Emoji >::size_type)jarg1; 
  result = (std::vector< Emojidex::Data::Emoji > *)new std::vector< Emojidex::Data::Emoji >(arg1);
  *(std::vector< Emojidex::Data::Emoji > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_EmojiVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Emojidex::Data::Emoji > *arg1 = (std::vector< Emojidex::Data::Emoji > *) 0 ;
  std::vector< Emojidex::Data::Emoji >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Emojidex::Data::Emoji > **)&jarg1; 
  result = ((std::vector< Emojidex::Data::Emoji > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_EmojiVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Emojidex::Data::Emoji > *arg1 = (std::vector< Emojidex::Data::Emoji > *) 0 ;
  std::vector< Emojidex::Data::Emoji >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Emojidex::Data::Emoji > **)&jarg1; 
  result = ((std::vector< Emojidex::Data::Emoji > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_EmojiVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Emojidex::Data::Emoji > *arg1 = (std::vector< Emojidex::Data::Emoji > *) 0 ;
  std::vector< Emojidex::Data::Emoji >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Emojidex::Data::Emoji > **)&jarg1; 
  arg2 = (std::vector< Emojidex::Data::Emoji >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_emojidex_EmojidexJNI_EmojiVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Emojidex::Data::Emoji > *arg1 = (std::vector< Emojidex::Data::Emoji > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Emojidex::Data::Emoji > **)&jarg1; 
  result = (bool)((std::vector< Emojidex::Data::Emoji > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_EmojiVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Emojidex::Data::Emoji > *arg1 = (std::vector< Emojidex::Data::Emoji > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Emojidex::Data::Emoji > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_EmojiVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Emojidex::Data::Emoji > *arg1 = (std::vector< Emojidex::Data::Emoji > *) 0 ;
  std::vector< Emojidex::Data::Emoji >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Emojidex::Data::Emoji > **)&jarg1; 
  arg2 = *(std::vector< Emojidex::Data::Emoji >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Emojidex::Data::Emoji >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Emojidex::Data::Emoji >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_EmojiVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Emojidex::Data::Emoji > *arg1 = (std::vector< Emojidex::Data::Emoji > *) 0 ;
  int arg2 ;
  std::vector< Emojidex::Data::Emoji >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Emojidex::Data::Emoji > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Emojidex::Data::Emoji >::value_type *) &std_vector_Sl_Emojidex_Data_Emoji_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Emojidex::Data::Emoji >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_EmojiVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Emojidex::Data::Emoji > *arg1 = (std::vector< Emojidex::Data::Emoji > *) 0 ;
  int arg2 ;
  std::vector< Emojidex::Data::Emoji >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Emojidex::Data::Emoji > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Emojidex::Data::Emoji >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Emojidex::Data::Emoji >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Emojidex_Data_Emoji_Sg__set(arg1,arg2,(Emojidex::Data::Emoji const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_delete_1EmojiVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Emojidex::Data::Emoji > *arg1 = (std::vector< Emojidex::Data::Emoji > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Emojidex::Data::Emoji > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1MojiCodes_1locale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::MojiCodes *arg1 = (Emojidex::Data::MojiCodes *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::MojiCodes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->locale = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1MojiCodes_1locale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::MojiCodes *arg1 = (Emojidex::Data::MojiCodes *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::MojiCodes **)&jarg1; 
  result = (std::string *) & ((arg1)->locale);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1MojiCodes_1moji_1string_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Emojidex::Data::MojiCodes *arg1 = (Emojidex::Data::MojiCodes *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::MojiCodes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->moji_string = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1MojiCodes_1moji_1string_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Emojidex::Data::MojiCodes *arg1 = (Emojidex::Data::MojiCodes *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::MojiCodes **)&jarg1; 
  result = (std::string *) & ((arg1)->moji_string);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1MojiCodes_1moji_1array_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Emojidex::Data::MojiCodes *arg1 = (Emojidex::Data::MojiCodes *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Emojidex::Data::MojiCodes **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->moji_array = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Data_1MojiCodes_1moji_1array_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Data::MojiCodes *arg1 = (Emojidex::Data::MojiCodes *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Data::MojiCodes **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->moji_array);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1Emojidex_1Data_1MojiCodes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Emojidex::Data::MojiCodes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Emojidex::Data::MojiCodes *)new Emojidex::Data::MojiCodes();
  *(Emojidex::Data::MojiCodes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_delete_1Emojidex_1Data_1MojiCodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Emojidex::Data::MojiCodes *arg1 = (Emojidex::Data::MojiCodes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Emojidex::Data::MojiCodes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1Emojidex_1Service_1Indexes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Emojidex::Service::Indexes *)new Emojidex::Service::Indexes();
  *(Emojidex::Service::Indexes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_delete_1Emojidex_1Service_1Indexes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1mojiCodes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  std::string arg2 ;
  Emojidex::Data::MojiCodes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->mojiCodes(arg2);
  *(Emojidex::Data::MojiCodes **)&jresult = new Emojidex::Data::MojiCodes((const Emojidex::Data::MojiCodes &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1mojiCodes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  Emojidex::Data::MojiCodes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  result = (arg1)->mojiCodes();
  *(Emojidex::Data::MojiCodes **)&jresult = new Emojidex::Data::MojiCodes((const Emojidex::Data::MojiCodes &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1utfEmoji_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->utfEmoji(arg2,arg3);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1utfEmoji_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  std::string arg2 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->utfEmoji(arg2);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1utfEmoji_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  result = (arg1)->utfEmoji();
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1extendedEmoji_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->extendedEmoji(arg2,arg3);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1extendedEmoji_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  std::string arg2 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->extendedEmoji(arg2);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1extendedEmoji_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  result = (arg1)->extendedEmoji();
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1nextPage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Data::Collection arg1 ;
  Emojidex::Data::Collection *argp1 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Emojidex::Data::Collection **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Emojidex::Data::Collection");
    return 0;
  }
  arg1 = *argp1; 
  result = Emojidex::Service::Indexes::nextPage(arg1);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1emoji_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool arg4 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->emoji(arg2,arg3,arg4);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1emoji_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (arg1)->emoji(arg2,arg3);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1emoji_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  unsigned int arg2 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->emoji(arg2);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1emoji_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  result = (arg1)->emoji();
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1newest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool arg4 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->newest(arg2,arg3,arg4);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1newest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (arg1)->newest(arg2,arg3);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1newest_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  unsigned int arg2 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->newest(arg2);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1newest_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  result = (arg1)->newest();
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1popular_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool arg4 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->popular(arg2,arg3,arg4);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1popular_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (arg1)->popular(arg2,arg3);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1popular_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  unsigned int arg2 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->popular(arg2);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Indexes_1popular_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Service::Indexes *arg1 = (Emojidex::Service::Indexes *) 0 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Indexes **)&jarg1; 
  result = (arg1)->popular();
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Search_1current_1page_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Emojidex::Service::Search *arg1 = (Emojidex::Service::Search *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Search **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->current_page = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Search_1current_1page_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Emojidex::Service::Search *arg1 = (Emojidex::Service::Search *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Search **)&jarg1; 
  result = (unsigned int) ((arg1)->current_page);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_new_1Emojidex_1Service_1Search(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Emojidex::Service::Search *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Emojidex::Service::Search *)new Emojidex::Service::Search();
  *(Emojidex::Service::Search **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_emojidex_EmojidexJNI_Emojidex_1Service_1Search_1term(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Emojidex::Service::Search *arg1 = (Emojidex::Service::Search *) 0 ;
  std::string arg2 ;
  Emojidex::Data::Collection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Emojidex::Service::Search **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->term(arg2);
  *(Emojidex::Data::Collection **)&jresult = new Emojidex::Data::Collection((const Emojidex::Data::Collection &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_emojidex_EmojidexJNI_delete_1Emojidex_1Service_1Search(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Emojidex::Service::Search *arg1 = (Emojidex::Service::Search *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Emojidex::Service::Search **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

