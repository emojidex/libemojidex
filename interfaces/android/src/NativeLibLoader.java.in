package com.emojidex.libemojidex;

import java.io.InputStream;
import java.io.FileOutputStream;
import java.io.File;
import java.util.HashMap;

/**
 *  Native library loader.
 */
final class NativeLibLoader
{
  /**
   *  Load library.
   */
  static void load()
  {
    final String arch = getArchitecture();

    loadFromJar("libcrystax.so", arch);
    loadFromJar("libgnustl_shared.so", arch);
    loadFromJar("libcrypto.so.1.0.0", arch);
    loadFromJar("libssl.so.1.0.0", arch);
    loadFromJar("libcurl.so.5", arch);
    loadFromJar("libemojidex-android.so", arch);
  }

  /**
   *  Get architecture name.
   */
  private static String getArchitecture()
  {
    final HashMap<String, String> table = new HashMap<String, String>()
    {
      {
        put("armv7l", "armeabi");
//        put("", "arm64-v8a");
        put("mips", "mips");
//        put("", "mips64");
        put("i686", "x86");
        put("x86_64", "x86_64");
      }
    };

    return table.get(System.getProperty("os.arch"));
  }

  /**
   *  Load library from jar file.
   */
  private static void loadFromJar(String name, String arch)
  {
    try
    {
      final String path = "libs/" + arch + "/" + name;
      final InputStream is = NativeLibLoader.class.getClassLoader().getResourceAsStream(path);

      final File tmp = new File(System.getProperty("java.io.tmpdir"), name);
      tmp.deleteOnExit();

      final FileOutputStream os = new FileOutputStream(tmp);
      final byte[] buf = new byte[4096];
      int readBytes;

      while( (readBytes = is.read(buf)) != -1 )
        os.write(buf, 0, readBytes);

      os.close();
      is.close();

      System.load(tmp.getAbsolutePath());
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }
  }
}
