package com.emojidex.libemojidex;

import java.io.InputStream;
import java.io.FileOutputStream;
import java.io.File;
import java.util.Map;
import java.util.LinkedHashMap;

/**
 *  Native library loader.
 */
final class NativeLibLoader
{
  /**
   *  Load library.
   */
  static void load()
  {
    final String arch = getArchitecture();

    load("crystax", "libcrystax.so", arch);
    load("gnustl_shared", "libgnustl_shared.so", arch);
    load("crypto", "libcrypto.so.1.0.0", arch);
    load("ssl", "libssl.so.1.0.0", arch);
    load("curl", "libcurl.so.5", arch);
    load("emojidex-android", "libemojidex-android.so", arch);
  }

  /**
   *  Get architecture name.
   */
  private static String getArchitecture()
  {
    final LinkedHashMap<String, String[]> table = new LinkedHashMap<String, String[]>()
    {
      {
//        put("armv7l", new String[] {"armeabi"});
//        put("", new String[] {"arm64-v8a", "armeabi"});
        put("arm", new String[] {"armeabi"});
//        put("", new String[] {"mips64", "mips"});
        put("mips", new String[] {"mips"});
        put("i686", new String[] {"x86"});
        put("x86_64", new String[] {"x86_64", "x86"});
      }
    };

    // Check library file exists.
    final String arch = System.getProperty("os.arch");
    for(Map.Entry<String, String[]> entry : table.entrySet())
    {
      if( arch.contains(entry.getKey()) )
      {
        for(String result : entry.getValue())
        {
          if(NativeLibLoader.class.getClassLoader().getResource(getPath("libemojidex-android.so", result)) != null)
            return result;
        }
      }
    }

    return "armeabi";
  }

  /**
   * Get file path.
   */
  private static String getPath(String name, String arch)
  {
    return "libs/" + arch + "/" + name;
  }

  /**
   *  Load library.
   */
  private static void load(String name, String filename, String arch)
  {
    try
    {
      System.loadLibrary(name);
    }
    catch(UnsatisfiedLinkError e)
    {
      loadFromJar(filename, arch);
    }
  }

  /**
   *  Load library from jar file.
   */
  private static void loadFromJar(String name, String arch)
  {
    try
    {
      final String path = getPath(name, arch);
      final InputStream is = NativeLibLoader.class.getClassLoader().getResourceAsStream(path);

      final File tmp = new File(System.getProperty("java.io.tmpdir"), name);
      tmp.deleteOnExit();

      final FileOutputStream os = new FileOutputStream(tmp);
      final byte[] buf = new byte[4096];
      int readBytes;

      while( (readBytes = is.read(buf)) != -1 )
        os.write(buf, 0, readBytes);

      os.close();
      is.close();

      System.load(tmp.getAbsolutePath());
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }
  }
}
