package com.emojidex.libemojidex;

import com.emojidex.libemojidex.LibEmojidex;

import java.io.InputStream;
import java.io.FileOutputStream;
import java.io.File;
import java.util.Map;
import java.util.LinkedHashMap;

/**
 *  Libemojidex initializer.
 */
final class LibemojidexInitializer
{
  /**
   *  Initialize.
   */
  static void initialize()
  {
    // Load native libraries.
    final String arch = getArchitecture();
    loadNativeLibrary("libcrystax.so", arch);
    loadNativeLibrary("libgnustl_shared.so", arch);
    loadNativeLibrary("libcrypto.so.1.1", arch);
    loadNativeLibrary("libssl.so.1.1", arch);
    loadNativeLibrary("libcurl.so", arch);
    loadNativeLibrary("libmsgpackc.so.2", arch);
    loadNativeLibrary("libemojidex-android.so", arch);

    // For ssl.
    LibEmojidex.setCACertPath(copyFileFromJar("data/cacert.pem", "cacert.pem"));
  }

  /**
   *  Get architecture name.
   */
  private static String getArchitecture()
  {
    final LinkedHashMap<String, String[]> table = new LinkedHashMap<String, String[]>()
    {
      {
//        put("armv7l", new String[] {"armeabi"});
//        put("", new String[] {"arm64-v8a", "armeabi"});
        put("arm", new String[] {"armeabi"});
//        put("", new String[] {"mips64", "mips"});
        put("mips", new String[] {"mips"});
        put("i686", new String[] {"x86"});
        put("x86_64", new String[] {"x86_64", "x86"});
      }
    };

    // Check library file exists.
    final String arch = System.getProperty("os.arch");
    for(Map.Entry<String, String[]> entry : table.entrySet())
    {
      if( arch.contains(entry.getKey()) )
      {
        for(String result : entry.getValue())
        {
          if(isExists("libemojidex-android.so", result))
            return result;
        }
      }
    }

    return "armeabi";
  }

  /**
   * Get native library file path.
   */
  private static String getNativeLibraryPath(String name, String arch)
  {
    return "libs/" + arch + "/" + name + "_";
  }

  /**
   *  Load native library.
   */
  private static void loadNativeLibrary(String name, String arch)
  {
    try
    {
      System.load(name);
    }
    catch(UnsatisfiedLinkError e)
    {
      loadNativeLibraryFromJar(name, arch);
    }
  }

  /**
   *  Load native library from jar file.
   */
  private static void loadNativeLibraryFromJar(String name, String arch)
  {
    System.load(copyFileFromJar(getNativeLibraryPath(name, arch), name));
  }

  /**
   *  Copy file from jar to temporary directory.
   */
  private static String copyFileFromJar(String source, String destination)
  {
    try
    {
      final InputStream is = LibemojidexInitializer.class.getClassLoader().getResourceAsStream(source);

      final File tmp = new File(System.getProperty("java.io.tmpdir") + "/libemojidex", destination);
      final File parentDir = tmp.getParentFile();
      if(!parentDir.exists())
      {
        parentDir.mkdirs();
        parentDir.deleteOnExit();
      }
      tmp.deleteOnExit();

      final FileOutputStream os = new FileOutputStream(tmp);
      final byte[] buf = new byte[4096];
      int readBytes;

      while( (readBytes = is.read(buf)) != -1 )
        os.write(buf, 0, readBytes);

      os.close();
      is.close();

      return tmp.getAbsolutePath();
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }

    return "";
  }

  /**
   *  Check file exists.
   */
  private static boolean isExists(String name, String arch)
  {
    return LibemojidexInitializer.class.getClassLoader().getResource(getNativeLibraryPath(name, arch)) != null;
  }
}
